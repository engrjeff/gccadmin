datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum MemberType {
  KIDS
  MEN
  WOMEN
  YOUTH
  YOUNGPRO
}

enum ProcessLevel {
  NEW
  PREENC
  ENCOUNTER
  LEADERSHIP1
  LEADERSHIP2
  LEADERSHIP3
}

enum CellType {
  SOULWINNING
  OPEN
  DISCIPLESHIP
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]

  isAlreadyLinked Boolean? @default(false)
}

model Disciple {
  id            String       @id @default(cuid())
  name          String
  address       String
  birthdate     DateTime
  gender        Gender
  member_type   MemberType
  process_level ProcessLevel
  isPrimary     Boolean      @default(false)
  isActive      Boolean      @default(true)
  isDeleted     Boolean      @default(false)
  isMyPrimary   Boolean      @default(false)

  leaderId String?
  leader   Disciple? @relation("LeaderDisciples", fields: [leaderId], references: [id])

  disciples Disciple[] @relation("LeaderDisciples")

  lessons_taken LessonsTakenByDisciple[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAccountId         String?
  attended_cell_reports CellReportAttendees[]
  cell_reports          CellReport[]
  assisted_cell_reports CellReportAssistant[]
}

model LessonSeries {
  id          String   @id @default(cuid())
  title       String
  description String?
  tags        String[]

  lessons Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id                   String   @id @default(cuid())
  title                String
  description          String?
  file_url             String?
  scripture_references String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cell_reports     CellReport[]
  disciples        LessonsTakenByDisciple[]
  lesson_series    LessonSeries?            @relation(fields: [lesson_series_id], references: [id])
  lesson_series_id String?
}

model LessonsTakenByDisciple {
  lesson    Lesson @relation(fields: [lesson_id], references: [id])
  lesson_id String

  disciple    Disciple @relation(fields: [disciple_id], references: [id])
  disciple_id String

  assignedAt DateTime @default(now())

  @@id([lesson_id, disciple_id])
}

model CellReport {
  id    String   @id @default(cuid())
  type  CellType
  venue String
  date  DateTime
  time  String

  has_custom_lesson Boolean @default(false)

  lessonId             String?
  lesson               Lesson?  @relation(fields: [lessonId], references: [id])
  lesson_name          String?
  scripture_references String[]

  leaderId String
  leader   Disciple @relation(fields: [leaderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attendees CellReportAttendees[]

  assistant    CellReportAssistant? @relation(fields: [assistant_id], references: [disciple_id])
  assistant_id String?
}

model CellReportAttendees {
  cell_report    CellReport @relation(fields: [cell_report_id], references: [id])
  cell_report_id String

  disciple    Disciple @relation(fields: [disciple_id], references: [id])
  disciple_id String

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([cell_report_id, disciple_id])
}

model CellReportAssistant {
  disciple     Disciple     @relation(fields: [disciple_id], references: [id])
  disciple_id  String
  cell_reports CellReport[]

  @@id([disciple_id])
}
